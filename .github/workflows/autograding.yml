name: Autograding

on: 
  [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up C Compiler
      - name: Set up C Compiler
        run: sudo apt-get install build-essential

      # Step 3: Compile student code
      - name: Compile student code
        run: |
          g++ -o student_program student_program.cpp
          if [ $? -ne 0 ]; then
            echo "Compilation failed. Exiting..."
            exit 1
          fi

      # Step 4: Run and Compare Test Cases (Exact Match)
      - name: Run and Compare Test Cases
        run: |
          total_testcases=0
          passed_testcases=0
          
          for i in $(seq 1 10); do
            input_file="testcases/input${i}.dat"
            expected_output_file="testcases/output${i}.dat"
            actual_output_file="output${i}.txt"
            
            if [ -f "$input_file" ]; then
              total_testcases=$((total_testcases+1))
              
              # Run the student program
              ./student_program < "$input_file" > "$actual_output_file"
              
              if [ -f "$expected_output_file" ]; then
                # Compare using diff for exact match
                if diff -q "$expected_output_file" "$actual_output_file" > /dev/null; then
                  echo -e "\033[0;32mTest Case ${i} Passed\033[0m"
                  passed_testcases=$((passed_testcases+1))
                else
                  echo -e "\033[0;31mTest Case ${i} Failed\033[0m"
                  echo -e "\033[0;31mDifferences:\033[0m"
                  diff "$expected_output_file" "$actual_output_file" || true
                fi
              else
                echo "Test Case ${i} skipped (no expected output file found)."
              fi
            else
              echo "Test Case ${i} skipped (no input file found)."
            fi
          done
          
          # Calculate Score as Percentage
          if [ $total_testcases -gt 0 ]; then
            score=$(( (passed_testcases * 100) / total_testcases ))
          else
            score=0
          fi
          
          echo "Total Test Cases: $total_testcases"
          echo "Passed Test Cases: $passed_testcases"
          echo "Score Percentage: $score%"
          echo "SCORE=$score" >> $GITHUB_ENV

      # Step 5: Extract student info from file
      - name: Extract student info
        id: student_info
        run: |
          source student_info.txt
          echo "STUDENT_ID=${student_id}" >> $GITHUB_ENV
          echo "SUBJECT_ID=${subject_id}" >> $GITHUB_ENV
          echo "TERM=${term}" >> $GITHUB_ENV

      # Step 6: Extract lab_id from github_repo
      - name: Extract lab_id from github_repo
        id: extract_lab_id
        run: |
          LAB_ID=$(echo "${{ github.repository }}" | awk -F'/' '{print $2}' | awk -F'-' '{print $1}')
          echo "LAB_ID=$LAB_ID" >> $GITHUB_ENV

      # Step 7: Record results to the website
      - name: Record results
        if: ${{ success() }}  # Runs only if all previous steps succeeded
        run: |
          TIMESTAMP=$(TZ='Asia/Bangkok' date +"%Y-%m-%dT%H:%M:%S%z")
          curl -X POST -H "Content-Type: application/json" \
          -d '{
            "student_id": "${{ env.STUDENT_ID }}",
            "subject_id": "${{ env.SUBJECT_ID }}",
            "term": "${{ env.TERM }}",
            "lab_id": "${{ env.LAB_ID }}",
            "github_username": "${{ github.actor }}",
            "github_repo": "${{ github.repository }}",
            "timestamp": "'"$TIMESTAMP"'",
            "score": "${{ env.SCORE }}"
          }' \
          https://www.thailandfxwarrior.com/get_student_info.php
